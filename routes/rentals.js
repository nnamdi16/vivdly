const auth = require('../middleware/auth');
const {Rental,validate} = require('../model/rentals');
const {Movie} = require('../model/movies');
const {Customer} = require('../model/customer');
const mongoose = require('mongoose');
const express = require('express');
const router = express.Router();
const Fawn = require('fawn');

Fawn.init(mongoose);

router.get('/',async(req,res) => {
  const rentals = await Rental.find().sort('-dateOut');   
  res.send(rentals);
});

router.post('/', auth, async(req,res) => {
  //Output when there is error
  const{error} = validate(req.body);
  if(error) res.status(400).send(error.details[0].message );

  const customer = await Customer.findById(req.body.customerId);
  if(!customer) return res.status(400).send('Invalid User');

  const movie = await Movie.findById(req.body.movieId);
  if(!movie) return res.status(400).send('Movie is not found');

  if(movie.numberInStock === 0) return res.status(400).send('Movie not found');
  
  let rental = new Rental ({
    customer: {
      _id: customer._id,
      name:customer.name,
      phone:customer.phone
    },
    movie: {
      _id: movie._id,
      title:movie.title,
      dailyRentalRate:movie.dailyRentalRate
    }
  });
  try {
    new Fawn.Task()
    .save('rentals',rental)
    .update('movies', {_id:movie._id},
    {$inc: {numberInStock: -1}})
    .run();
    res.send(rental);
  } catch (error) {
    res.status(500).send('Something failed');
  }

  // rental = await rental.save();
  // movie.numberInStock--;
  // movie.save();

  res.send(rental);
 
});

router.get('/:id',async(req,res) => {
  const rental = await Rental.findById(req.params.id);
  if(!rental) return res.status(404).send('The rental with the given ID was not found.');
  res.send(rental)
});

//Transaction in relational database is a group of operations that should be performed as a unit.
//Either all the operations will complete and change the state of the database or if something fails in the middle all the operations that have been applied will be rolled back. In mongodb transactions can't be carried out but an alternative to transaction is the two phase commit. A library that can implement the two phase commit it fawn.

//_id:

/*
12 bytes
 - 4 bytes : timestamp
 - 3 bytes : machine identifier
 - 2 bytes : process identifier
 - 3 bytes : counter

 The ID is generated by mongodb driver not mongodb
*/

module.exports = router;  